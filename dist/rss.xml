<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet href="/rss.xsl" type="text/xsl"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>hacknLove</title><description>Blog de desarrollo de software en Espa√±ol</description><link>https://hacknlove.org</link><item><title> Evitar el Pr√≥ximo Desastre al Estilo Microservicios: DDD</title><link>https://hacknlove.org/posts/la-trampa-del-ddd</link><guid isPermaLink="true">https://hacknlove.org/posts/la-trampa-del-ddd</guid><description>Aplica DDD solo donde la complejidad del negocio lo haga necesario ‚Äî y √∫nicamente aquellas partes de DDD que realmente aporten valor a ese proyecto concreto.</description><pubDate>Sun, 24 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;TL;DR ‚Äî Resumen Ejecutivo&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Aplica DDD solo donde la complejidad del negocio lo haga necesario; y √∫nicamente aquellas partes de DDD que realmente aporten valor a ese proyecto concreto.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;1. ¬øCu√°ndo usar DDD? La Respuesta Equivocada:&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúSiempre que tengas un proyecto complejo.‚Äù&lt;/em&gt; üí©&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mucha gente cree que DDD es un buen enfoque para todo proyecto complejo.&lt;/p&gt;
&lt;p&gt;Tomemos como ejemplo los proyectos open source m√°s famosos y complejos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sistemas operativos &amp;amp; kernels&lt;/strong&gt;: Linux Kernel, Android (AOSP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servidores web &amp;amp; proxies&lt;/strong&gt;: Apache HTTP Server, Nginx, Traefik&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bases de datos&lt;/strong&gt;: PostgreSQL, MySQL, MongoDB, Redis&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contenedores &amp;amp; orquestaci√≥n&lt;/strong&gt;: Docker, Kubernetes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Navegadores &amp;amp; entornos de escritorio&lt;/strong&gt;: Firefox, Chromium, GNOME, KDE&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editores &amp;amp; IDEs&lt;/strong&gt;: VS Code, Eclipse, IntelliJ Community, Volt (nuevo)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gr√°ficos &amp;amp; multimedia&lt;/strong&gt;: GIMP, Inkscape, Krita, Blender, Audacity, FFmpeg&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Productividad&lt;/strong&gt;: LibreOffice&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CMS &amp;amp; aplicaciones web&lt;/strong&gt;: WordPress, Drupal, Joomla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seguridad &amp;amp; criptograf√≠a&lt;/strong&gt;: OpenSSL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frameworks de IA/ML&lt;/strong&gt;: TensorFlow, PyTorch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lenguajes &amp;amp; compiladores&lt;/strong&gt;: Node.js, TypeScript, Babel, Python, PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‚úÖ Todos ellos abordan problemas muy complejos, y lo hacen de una forma muy exitosa.&lt;/p&gt;
&lt;p&gt;‚ùå Ninguno de ellos implementa DDD.&lt;/p&gt;
&lt;p&gt;‚ùå En cambio, utilizan aquellos patrones y paradigmas que mejor se adaptan a sus caracter√≠sticas concretas y que mejor solucionan sus necesidades espec√≠ficas.&lt;/p&gt;
&lt;p&gt;Si DDD fuese realmente el mejor enfoque para cualquier sistema complejo, ser√≠a esperable que al menos uno de estos proyectos lo hubiera adoptado ya. Ninguno lo ha hecho a√∫n, y seguramente no lo har√°n nunca.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;2. Dos Tipos de Complejidad&lt;/h2&gt;
&lt;h3&gt;Complejidad de negocio&lt;/h3&gt;
&lt;p&gt;Contratos, facturaci√≥n, permisos, regulaci√≥n, reglas en constante cambio.
&lt;em&gt;Ejemplos: sistemas ERP, banca, salud, plataformas de contenidos.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En estas √°reas, &lt;strong&gt;DDD aporta valor&lt;/strong&gt;: ayuda a modelar invariantes y mantener la consistencia cuando las reglas de negocio cambian con frecuencia.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDDD isn‚Äôt first and foremost about technology. In its most central principles, DDD is about discussion, listening, understanding, discovery, and business value.‚Äù&lt;/em&gt;
(&lt;a href=&quot;https://www.goodreads.com/author/quotes/6444097.Vaughn_Vernon?utm_source=chatgpt.com&quot;&gt;Goodreads ‚Äì Vaughn Vernon quotes&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DDD est√° pensado para traducir el negocio en software, no para resolver desaf√≠os puramente t√©cnicos.&lt;/p&gt;
&lt;h3&gt;Complejidad de infraestructura&lt;/h3&gt;
&lt;p&gt;Rendimiento, concurrencia, redes, sistemas distribuidos, fiabilidad, tolerancia a fallos.
&lt;em&gt;Ejemplos: Linux Kernel, Kubernetes, FFmpeg, Nginx.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Aqu√≠, &lt;strong&gt;DDD no aporta valor&lt;/strong&gt;. La complejidad radica en cuestiones t√©cnicas, no en reglas de negocio.&lt;/p&gt;
&lt;p&gt;Como dice Martin Fowler:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDDD provides little advantage for problems that are algorithmically complex but have little domain complexity.‚Äù&lt;/em&gt;
(&lt;a href=&quot;https://martinfowler.com/bliki/DomainDrivenDesign.html?utm_source=chatgpt.com&quot;&gt;martinfowler.com&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Y la gu√≠a oficial de microservicios de .NET de Microsoft apunta lo mismo:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDDD approaches should be applied only if you are implementing complex microservices with significant business rules. Simpler responsibilities‚Ä¶ can be managed with simpler approaches.‚Äù&lt;/em&gt;
(&lt;a href=&quot;https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/ddd-oriented-microservice?utm_source=chatgpt.com&quot;&gt;Microsoft Learn&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Por qu√© usar DDD es perjudicial en m√≥dulos cuya complejidad es t√©cnica&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Carga de mantenimiento&lt;/strong&gt; ‚Üí hay que ocuparse no solo de resolver el problema t√©cnico, sino de ajustar el c√≥digo a un conjunto de patrones y abstracciones que no tienen nada que ver con el problema.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sobre-abstracci√≥n&lt;/strong&gt; ‚Üí capas artificiales que no se ajustan al problema, que hacen el c√≥digo m√°s dif√≠cil de seguir&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bajo rendimiento&lt;/strong&gt; ‚Üí indirecciones y manejo de eventos innecesarios en rutas cr√≠ticas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;baja velocidad de desarrollo&lt;/strong&gt; ‚Üí m√°s artefactos que dise√±ar, revisar y mantener antes de enviar algo a producci√≥n&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fricci√≥n en integraci√≥n&lt;/strong&gt; ‚Üí las abstracciones de DDD no se ajustan a las necesidades de infraestructura, y complican la integraci√≥n&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Menor flexibilidad&lt;/strong&gt; ‚Üí el c√≥digo de infraestructura debe evolucionar mediante experimentaci√≥n y ajustes; los modelos r√≠gidos ralentizan la iteraci√≥n&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üëâ Para los m√≥dulos que deben resolver un problema tecnol√≥gico, estos costes superan con creces cualquier beneficio. Es mejor usar los patrones y paradigmas que mejor se ajusten a las necesidades del problema.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;3. El Error Com√∫n: Convertir DDD en un est√°ndar&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Razonamiento: &lt;em&gt;‚ÄúComo nuestra compa√±√≠a tiene una importante carga de l√≥gica de negocio compleja, vamos a usar DDD en todos los proyectos.‚Äù&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Realidad: Solo un subconjunto concreto e identificable de los proyectos se relaciona directamente con esa l√≥gica de negocio compleja, el resto resuelven problemas puramente t√©cnicos.&lt;/li&gt;
&lt;li&gt;Resultado:
&lt;ul&gt;
&lt;li&gt;entregas m√°s lentas&lt;/li&gt;
&lt;li&gt;complejidad innecesaria&lt;/li&gt;
&lt;li&gt;deuda t√©cnica&lt;/li&gt;
&lt;li&gt;esfuerzo desperdiciado&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;4. La Soluci√≥n: DDD Selectivo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aplicar DDD &lt;strong&gt;solo en los m√≥dulos donde la complejidad de negocio lo hace necesario. y s√≥lo aquellas pr√°cticas de DDD que realmente aporten valor dadas las caracter√≠sticas concretas del proyecto.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;‚ÄúDDD works best when used judiciously ‚Äî and struggles when forced on projects that don&apos;t need its full rigor‚Äù&lt;/em&gt; ‚Äî &lt;a href=&quot;https://interviewnoodle.com/why-domain-driven-design-is-more-than-just-a-buzzword-c8305cd8bec0?utm_source=chatgpt.com&quot;&gt;Interview Noodle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;‚ÄúUsing DDD for simple domains is thus an overkill, you&apos;d only be shooting yourself in the foot‚Äù&lt;/em&gt; ‚Äî &lt;a href=&quot;https://www.reddit.com/r/java/comments/n0kukj/is_domain_driven_design_still_the_recommended/?utm_source=chatgpt.com&quot;&gt;Reddit /r/java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;5. Recomendaci√≥n Pr√°ctica&lt;/h2&gt;
&lt;h3&gt;Checklist: ¬øEste proyecto necesita DDD?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;¬øExisten &lt;strong&gt;invariantes de negocio no triviales&lt;/strong&gt; que siempre deben cumplirse?&lt;/li&gt;
&lt;li&gt;¬øLas reglas de negocio cambian de forma frecuente o importante?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;‚úÖ Si no se cumplen esas 2 condiciones probablemente DDD &lt;strong&gt;no compense&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;üëâ El enfoque correcto es la &lt;strong&gt;adopci√≥n selectiva&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usa DDD &lt;strong&gt;solo&lt;/strong&gt; en los proyectos (o m√≥dulos) donde la complejidad de negocio lo justifique.&lt;/li&gt;
&lt;li&gt;Aplica &lt;strong&gt;solo las partes de DDD&lt;/strong&gt; que aporten valor.&lt;/li&gt;
&lt;li&gt;En proyectos centrados en infraestructura, usa patrones m√°s simples y probados.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;6. El lenguaje ubicuo no es exclusivo de DDD.&lt;/h2&gt;
&lt;p&gt;No necesitas DDD para tener lenguaje ubicuo.
Puedes establecer un vocabulario compartido y consistente incluso en un c√≥digo espagueti ‚Äî solo es cuesti√≥n de consensuar nombres y usarlos siempre igual.&lt;/p&gt;
&lt;p&gt;No necesitas bounded contexts, agregados, invariantes ni tres capas de abstracciones solo para solucionar la terminolog√≠a.&lt;/p&gt;
&lt;p&gt;Si quiero un vaso de leche, no necesito comprar una vaca.&lt;/p&gt;
&lt;p&gt;Y la misma l√≥gica se aplica dentro de DDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un proyecto puede beneficiarse de &lt;strong&gt;bounded contexts&lt;/strong&gt;, pero eso no significa que tambi√©n necesite &lt;strong&gt;agregados&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Un proyecto puede beneficiarse de &lt;strong&gt;invariantes&lt;/strong&gt;, pero eso no significa que tambi√©n necesite &lt;strong&gt;CQRS o event sourcing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Un proyecto puede beneficiarse de &lt;strong&gt;agregados&lt;/strong&gt;, pero eso no significa que tambi√©n necesite &lt;strong&gt;capas extra de abstracci√≥n ni domain events&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üëâ Debe evaluarse la conveniencia de cada t√°ctica DDD para cada proyecto en funci√≥n de lo que le aporta y de lo que cuesta.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;7. Conclusi√≥n&lt;/h2&gt;
&lt;p&gt;DDD es una herramienta poderosa, pero no universal.
Ha probado su utilidad all√° donde la complejidad de negocio es alta, pero tambi√©n ha demostrado ser una carga cuando se fuerza su uso donde no es necesario.&lt;/p&gt;
&lt;p&gt;üëâ La lecci√≥n de la era de los microservicios es clara: &lt;strong&gt;no conviertas una buena idea en un mal est√°ndar.&lt;/strong&gt;
Aplica DDD solo donde la complejidad de negocio lo demande, y √∫nicamente las partes que aporten valor. En el resto aplica aquellos patrones y paradigmas que tengan sentido para el problema concreto.&lt;/p&gt;
</content:encoded><author>hacknlove</author></item><item><title>¬øC√≥mo organizar el c√≥digo de cara a la mantenibilidad? A grandes rasgos.</title><link>https://hacknlove.org/posts/organizar-para-mantenibilidad</link><guid isPermaLink="true">https://hacknlove.org/posts/organizar-para-mantenibilidad</guid><description>¬øC√≥mo organizar el c√≥digo? A grandes rasgos.</description><pubDate>Fri, 01 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Este art√≠culo va a analizar este tema desde una perspectiva te√≥rica de brocha muy gorda, en lo que respecta a la mantenibilidad del c√≥digo.&lt;/p&gt;
&lt;h2&gt;Presentaci√≥n (La realidad)&lt;/h2&gt;
&lt;p&gt;Nuestro trabajo consiste en organizar recursos para satisfacer requisitos.&lt;/p&gt;
&lt;p&gt;Eso es todo lo que hacemos.&lt;/p&gt;
&lt;h3&gt;Los requisitos:&lt;/h3&gt;
&lt;p&gt;Los requisitos responden a necesidades de negocio, y nos los dan los product owners.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;registrar un usuario&lt;/li&gt;
&lt;li&gt;publicar un producto&lt;/li&gt;
&lt;li&gt;hacer una b√∫squeda&lt;/li&gt;
&lt;li&gt;A√±adir un producto a un carrito&lt;/li&gt;
&lt;li&gt;dejar un comentario&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Los Recursos&lt;/h3&gt;
&lt;p&gt;Los recursos que organizamos son principalmente de tipo tecnol√≥gico:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware&lt;/li&gt;
&lt;li&gt;servidores&lt;/li&gt;
&lt;li&gt;Bases de datos&lt;/li&gt;
&lt;li&gt;servicios&lt;/li&gt;
&lt;li&gt;protocolos de comunicaci√≥n&lt;/li&gt;
&lt;li&gt;Clientes&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;lenguajes de programaci√≥n&lt;/li&gt;
&lt;li&gt;frameworks&lt;/li&gt;
&lt;li&gt;bibliotecas&lt;/li&gt;
&lt;li&gt;herramientas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pero tambi√©n nosotros mismos somos parte de los recursos que tenemos que organizar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;equipos de desarrolladores&lt;/li&gt;
&lt;li&gt;roles (desarrolladores, QAs, devops, etc.)&lt;/li&gt;
&lt;li&gt;documentaci√≥n&lt;/li&gt;
&lt;li&gt;gesti√≥n de proyectos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nudo (El conflicto)&lt;/h2&gt;
&lt;p&gt;Los recursos tecnol√≥gicos nos ofrecen horizontalidades, muchas veces apiladas en capas y que son necesarias para satisfacer m√∫ltiples requisitos de negocio; mientras que los requisitos de negocio se nos presentan como verticalidades y requieren de ·∏øultiples capas tecnol√≥gicas.&lt;/p&gt;
&lt;p&gt;Independientemente de los paradigmas y las arquitecturas que se utilicen, solucionar el problema primario (satisfacer los requisitos de negocio con los recursos tecnol√≥gicos) es sencillo.&lt;/p&gt;
&lt;p&gt;El problema secundario es el que resulta m√°s complicado, y a la postre m√°s relevante para el √©xito a largo plazo de la organizaci√≥n: encontrar de todas las soluciones primarias posibles, cu√°l ofrece la mayor calidad.&lt;/p&gt;
&lt;h3&gt;Nuestros criterios de calidad:&lt;/h3&gt;
&lt;p&gt;Los critarios de calidad son caracter√≠sticas que desamos que tenga nuestro sistema, aunque no sean directamente necesarias para satisfacer los requisitos de negocio.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rendimiento&lt;/li&gt;
&lt;li&gt;escalabilidad&lt;/li&gt;
&lt;li&gt;seguridad&lt;/li&gt;
&lt;li&gt;usabilidad que concierne a la organizaci√≥n del c√≥digo, se&lt;/li&gt;
&lt;li&gt;mantenibilidad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Puede haber tambi√©n criterios de calidad de negocio, que sean directamente necesarios para satisfacer los requisitos de negocio, pero en tal caso deben considerarse como requisitos de negocio.&lt;/p&gt;
&lt;h2&gt;Desenlace (La soluci√≥n)&lt;/h2&gt;
&lt;p&gt;Cualquier soluci√≥n a este problema se va a situar el alg√∫n punto entre organizaci√≥n puramente horizontal y organizaci√≥n puramente vertical.&lt;/p&gt;
&lt;p&gt;Y tanto ambas soluciones, como todos los puntos intermedios, tienen sus ventajas y sus inconvenientes.&lt;/p&gt;
&lt;p&gt;No existe una soluci√≥n pr√°ctica gen√©rica que siempre sea la mejor, pero la experiencia nos ense√±a que ciertas decisiones tienen a ciertas consecuencia.&lt;/p&gt;
&lt;p&gt;Supongamos que todas los los puntos de un extremo a otro son posibles, e idempotentes en lo que corresponde al resto de criterios de calidad.&lt;/p&gt;
&lt;p&gt;Cuanto m√°s horizontal sea la organizaci√≥n, m√°s f√°cil ser√° abordar tareas de tipo horizontal, como por ejemplo actualizar la versi√≥n de la base de datos.&lt;/p&gt;
&lt;p&gt;Cuanto m√°s vertical sea la organizaci√≥n, m√°s f√°cil ser√° abordar tareas de tipo vertical, como por ejemplo a√±adir la posibilidad de compartir un carrito de compras.&lt;/p&gt;
&lt;p&gt;Mi preferencia es tener equipos muy verticales (formados por PO, QAs, dise√±adores, frontend, backend, devops ) que trabajan en un c√≥digo organizado de forma muy vertical (locaLity of behavior).&lt;/p&gt;
&lt;p&gt;Y esa es mi preferencia porque tal configuraci√≥n facilita las tareas de tipo vertical, que son el tipo de tareas con las que estaremos trabajando el 99% del tiempo.&lt;/p&gt;
&lt;h2&gt;Plot twist (La sorpresa)&lt;/h2&gt;
&lt;p&gt;El problema es que ese 1% de tareas muy horizontales, como por ejemplo actualizar la versi√≥n de la base de datos, suelen ser muy grandes, muy complejas y muy cr√≠ticas, por lo que mucha gente comete el error de construir organizaciones horizontales para poder abordarlas con mayor facilidad; a pesar de que eso les obligar√° a pagar un peaje extra en el 99% restante de las tareas.&lt;/p&gt;
&lt;h2&gt;Conclusi√≥n (La consistencia al rescate):&lt;/h2&gt;
&lt;p&gt;Si en una organizaci√≥n vertical, hay suficiente consistencia horizontal, ese 1% de tareas muy horizontales se puede abordar con relativa facilidad.&lt;/p&gt;
&lt;p&gt;Por mucho que nos preocupen las grandes tareas horizontales que antes o despu√©s tendremos que afrontar, no debemos renunciar a organizar nuestro c√≥digo y nuestros equipos de forma vertical, sino que debemos dotar a nuestras organizaciones de suficiente consistencia horizontal como para las tareas horizontales puedan realizarse sin demasiado sufrimiento.&lt;/p&gt;
&lt;p&gt;Muchas veces, se intenta lo contrario: organizaciones muy horizontales con consistencia vertical. Desde mi punto de vista, si bien no es del todo un desastre y puede tener sentido en algunos casos, por norma general, y bas√°ndome en mi experiencia, recomiendo la organizaci√≥n vertical con consistencia horizontal.&lt;/p&gt;
</content:encoded><author>hacknlove</author></item></channel></rss>